<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="NEXYS4_DDR"/>
    <a name="downloadFrequency" val="2083333.3333333333"/>
    <a name="simulationFrequency" val="2048000.0"/>
    <boardmap boardname="NEXYS4_DDR">
      <mc key="/Button_1" map="521,91"/>
      <mc key="/Button_2" map="521,184"/>
      <mc key="/Button_3" map="522,138"/>
      <mc key="/Input_1" map="94,325"/>
      <mc key="/LED_1" map="107,271"/>
      <mc key="/LED_2" map="140,271"/>
      <mc key="/LED_3" map="172,271"/>
    </boardmap>
    <comp lib="0" loc="(1550,80)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(1560,140)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(1560,200)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(350,430)" name="Clock"/>
    <comp lib="0" loc="(370,390)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_1"/>
    </comp>
    <comp lib="0" loc="(530,220)" name="Ground"/>
    <comp lib="0" loc="(530,310)" name="Ground"/>
    <comp lib="0" loc="(750,170)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_1"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(810,450)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_2"/>
      <a name="output" val="true"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="2" loc="(940,590)" name="Demultiplexer">
      <a name="select" val="2"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="4" loc="(510,240)" name="D Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp lib="5" loc="(1030,310)" name="Hex Digit Display">
      <a name="label" val="Hex_Digit_Display_2"/>
    </comp>
    <comp lib="5" loc="(1040,450)" name="Hex Digit Display">
      <a name="label" val="Hex_Digit_Display_5"/>
    </comp>
    <comp lib="5" loc="(1080,310)" name="Hex Digit Display">
      <a name="label" val="Hex_Digit_Display_3"/>
    </comp>
    <comp lib="5" loc="(1090,450)" name="Hex Digit Display">
      <a name="label" val="Hex_Digit_Display_6"/>
    </comp>
    <comp lib="5" loc="(400,350)" name="Button">
      <a name="label" val="Button_1"/>
    </comp>
    <comp lib="5" loc="(410,370)" name="Button">
      <a name="label" val="Button_2"/>
    </comp>
    <comp lib="5" loc="(420,410)" name="Button">
      <a name="label" val="Button_3"/>
    </comp>
    <comp lib="5" loc="(760,390)" name="LED">
      <a name="label" val="LED_3"/>
    </comp>
    <comp lib="5" loc="(770,350)" name="LED">
      <a name="label" val="LED_1"/>
    </comp>
    <comp lib="5" loc="(800,370)" name="LED">
      <a name="label" val="LED_2"/>
    </comp>
    <comp lib="5" loc="(970,310)" name="Hex Digit Display">
      <a name="label" val="Hex_Digit_Display_1"/>
    </comp>
    <comp lib="5" loc="(980,450)" name="Hex Digit Display">
      <a name="label" val="Hex_Digit_Display_4"/>
    </comp>
    <comp loc="(1130,80)" name="cifru">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="cifru_1"/>
    </comp>
    <comp loc="(1420,140)" name="HEX2Seg">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1420,200)" name="HEX2Seg">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1420,80)" name="HEX2Seg">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(650,90)" name="counter">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="counter_1"/>
    </comp>
    <comp loc="(720,350)" name="UC">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="uc_1"/>
    </comp>
    <wire from="(1010,470)" to="(1010,590)"/>
    <wire from="(1030,310)" to="(1030,340)"/>
    <wire from="(1030,340)" to="(1150,340)"/>
    <wire from="(1040,450)" to="(1040,580)"/>
    <wire from="(1080,310)" to="(1080,330)"/>
    <wire from="(1080,330)" to="(1160,330)"/>
    <wire from="(1090,450)" to="(1090,570)"/>
    <wire from="(1130,100)" to="(1160,100)"/>
    <wire from="(1130,120)" to="(1150,120)"/>
    <wire from="(1130,140)" to="(1130,200)"/>
    <wire from="(1130,200)" to="(1130,350)"/>
    <wire from="(1130,200)" to="(1200,200)"/>
    <wire from="(1130,80)" to="(1170,80)"/>
    <wire from="(1150,120)" to="(1150,140)"/>
    <wire from="(1150,140)" to="(1150,340)"/>
    <wire from="(1150,140)" to="(1200,140)"/>
    <wire from="(1160,100)" to="(1160,110)"/>
    <wire from="(1160,110)" to="(1160,330)"/>
    <wire from="(1160,110)" to="(1190,110)"/>
    <wire from="(1170,80)" to="(1170,510)"/>
    <wire from="(1190,80)" to="(1190,110)"/>
    <wire from="(1190,80)" to="(1200,80)"/>
    <wire from="(1410,200)" to="(1420,200)"/>
    <wire from="(1420,140)" to="(1560,140)"/>
    <wire from="(1420,200)" to="(1560,200)"/>
    <wire from="(1420,80)" to="(1550,80)"/>
    <wire from="(310,460)" to="(350,460)"/>
    <wire from="(310,90)" to="(310,460)"/>
    <wire from="(310,90)" to="(430,90)"/>
    <wire from="(350,430)" to="(350,460)"/>
    <wire from="(350,430)" to="(490,430)"/>
    <wire from="(370,390)" to="(500,390)"/>
    <wire from="(390,110)" to="(390,290)"/>
    <wire from="(390,110)" to="(430,110)"/>
    <wire from="(390,290)" to="(450,290)"/>
    <wire from="(400,350)" to="(450,350)"/>
    <wire from="(410,130)" to="(410,230)"/>
    <wire from="(410,130)" to="(430,130)"/>
    <wire from="(410,230)" to="(430,230)"/>
    <wire from="(410,370)" to="(430,370)"/>
    <wire from="(420,410)" to="(470,410)"/>
    <wire from="(420,450)" to="(420,510)"/>
    <wire from="(420,450)" to="(500,450)"/>
    <wire from="(420,510)" to="(1170,510)"/>
    <wire from="(430,150)" to="(430,210)"/>
    <wire from="(430,210)" to="(560,210)"/>
    <wire from="(430,230)" to="(430,370)"/>
    <wire from="(430,370)" to="(500,370)"/>
    <wire from="(430,90)" to="(440,90)"/>
    <wire from="(450,290)" to="(450,350)"/>
    <wire from="(450,350)" to="(500,350)"/>
    <wire from="(470,250)" to="(470,410)"/>
    <wire from="(470,250)" to="(500,250)"/>
    <wire from="(470,410)" to="(500,410)"/>
    <wire from="(490,290)" to="(490,430)"/>
    <wire from="(490,290)" to="(500,290)"/>
    <wire from="(490,430)" to="(500,430)"/>
    <wire from="(530,220)" to="(530,240)"/>
    <wire from="(530,300)" to="(530,310)"/>
    <wire from="(560,210)" to="(560,250)"/>
    <wire from="(560,290)" to="(580,290)"/>
    <wire from="(650,190)" to="(750,190)"/>
    <wire from="(650,90)" to="(650,190)"/>
    <wire from="(710,350)" to="(720,350)"/>
    <wire from="(720,350)" to="(770,350)"/>
    <wire from="(720,370)" to="(800,370)"/>
    <wire from="(720,390)" to="(760,390)"/>
    <wire from="(720,410)" to="(730,410)"/>
    <wire from="(720,430)" to="(910,430)"/>
    <wire from="(730,410)" to="(730,420)"/>
    <wire from="(730,420)" to="(780,420)"/>
    <wire from="(750,170)" to="(750,190)"/>
    <wire from="(750,190)" to="(840,190)"/>
    <wire from="(760,390)" to="(860,390)"/>
    <wire from="(780,420)" to="(780,450)"/>
    <wire from="(780,420)" to="(850,420)"/>
    <wire from="(780,450)" to="(780,610)"/>
    <wire from="(780,450)" to="(810,450)"/>
    <wire from="(780,610)" to="(960,610)"/>
    <wire from="(840,190)" to="(880,190)"/>
    <wire from="(840,80)" to="(840,190)"/>
    <wire from="(840,80)" to="(910,80)"/>
    <wire from="(850,100)" to="(850,420)"/>
    <wire from="(850,100)" to="(910,100)"/>
    <wire from="(860,120)" to="(860,390)"/>
    <wire from="(860,120)" to="(910,120)"/>
    <wire from="(880,190)" to="(880,590)"/>
    <wire from="(880,590)" to="(940,590)"/>
    <wire from="(910,140)" to="(910,430)"/>
    <wire from="(970,310)" to="(970,350)"/>
    <wire from="(970,350)" to="(1130,350)"/>
    <wire from="(980,450)" to="(980,470)"/>
    <wire from="(980,470)" to="(1010,470)"/>
    <wire from="(980,570)" to="(1090,570)"/>
    <wire from="(980,580)" to="(1040,580)"/>
    <wire from="(980,590)" to="(1010,590)"/>
  </circuit>
  <vhdl name="UC">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY UC IS&#13;
  PORT (&#13;
  		up,down,reset,adauga_cifru : in std_logic;
    		clk : in std_logic;
    		introdus_3_LED : out std_logic;
    		cmp_3 : in std_logic;
    		introdu_caractere_LED,liber_ocupat_LED : out std_logic;
    		sel_afisor : out std_logic_vector (1 downto 0);
    		en_cmp1 : out std_logic
    		
    );&#13;
END UC;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF UC IS&#13;
&#13;
type STATE_dai is (idle, dulap_liber, car_1, car_2, car_3,cifru_adaugat,dulap_ocupat, car_1_o, car_2_o, car_3_o,cifru_adaugat_o,verif);
signal STATE, NXSTATE: STATE_dai;
signal introdu_caractere,liber_ocupat,introdus_3: std_logic :='0';
BEGIN&#13;

UPDATE_STATE: process (Clk)
			begin
			if Clk'EVENT and Clk = '1' then
					STATE &lt;= NXSTATE;
				end if;
			end process UPDATE_STATE;

TRANSITIONS: process (STATE,adauga_cifru,reset,cmp_3,liber_ocupat)
				
				begin
				case STATE is
					when idle =&gt; en_cmp1&lt;='0';
								if liber_ocupat='1' then NXSTATE&lt;=dulap_ocupat;
								else NXSTATE &lt;= dulap_liber;
								end if;
					when dulap_liber =&gt; if adauga_cifru='1' then NXSTATE &lt;= car_1;
							   else NXSTATE &lt;= dulap_liber;
							   end if;
					when car_1 =&gt; sel_afisor&lt;="00";
								if adauga_cifru='1' then NXSTATE &lt;= car_2;
								 else NXSTATE &lt;= car_1;
								 end if;
					when car_2 =&gt; sel_afisor&lt;="01";
								if adauga_cifru='1' then NXSTATE &lt;= car_3;
								 else NXSTATE &lt;= car_2;
								 end if;
					when car_3 =&gt; sel_afisor&lt;="10";
								if adauga_cifru='1' then NXSTATE &lt;= cifru_adaugat;
								 else NXSTATE &lt;= car_3;
								 end if;
					when cifru_adaugat =&gt;  sel_afisor&lt;="11";
								if reset='1' then NXSTATE &lt;= dulap_liber;
								else NXSTATE &lt;= dulap_ocupat;
								end if;
									
					when dulap_ocupat =&gt; if adauga_cifru='1' then NXSTATE &lt;= car_1_o;
							   else NXSTATE &lt;= dulap_ocupat;
							   end if;
					when car_1_o =&gt; sel_afisor&lt;="00";
								if adauga_cifru='1' then NXSTATE &lt;= car_2_o;
								 else NXSTATE &lt;= car_1_o;
								 end if;
					when car_2_o =&gt; sel_afisor&lt;="01";
								if adauga_cifru='1' then NXSTATE &lt;= car_3_o;
								 else NXSTATE &lt;= car_2_o;
								 end if;
					when car_3_o =&gt; sel_afisor&lt;="10";
								if adauga_cifru='1' then NXSTATE &lt;= cifru_adaugat_o;
								 else NXSTATE &lt;= car_3_o;
								 end if;
					when cifru_adaugat_o =&gt; sel_afisor&lt;="11";
								if reset='1' then NXSTATE &lt;= dulap_ocupat;
								else NXSTATE &lt;= verif;
								end if;
					when verif =&gt; 	en_cmp1&lt;='1';
								if cmp_3='1' then NXSTATE &lt;= dulap_liber;
									else NXSTATE &lt;= dulap_ocupat;
									end if;						
				end case;
			end process;

			
Outputs: process (STATE,adauga_cifru,reset,cmp_3,liber_ocupat)
		begin


		case STATE is
					when idle =&gt; introdu_caractere_LED&lt;='0' ; liber_ocupat_LED&lt;='0'; introdus_3_LED&lt;='0';
					when dulap_liber =&gt; introdu_caractere_LED&lt;='1';en_cmp1&lt;='0';
					when cifru_adaugat =&gt; if reset='0' then introdu_caractere_LED&lt;='0';liber_ocupat_LED&lt;='1';introdus_3_LED&lt;='1';
									  else introdu_caractere_LED&lt;='1';
									  end if;
					when dulap_ocupat =&gt; introdu_caractere_LED&lt;='1';introdus_3_LED&lt;='0';
					when cifru_adaugat_o =&gt; if reset='0' then introdu_caractere_LED&lt;='0';introdus_3_LED&lt;='1';
									 else introdu_caractere_LED&lt;='1';
									 end if;
					when verif =&gt; 
								if cmp_3='1' then liber_ocupat_LED&lt;='0';introdus_3_LED&lt;='0';
								else liber_ocupat_LED&lt;='1';introdus_3_LED&lt;='0';
								END if;
					when others =&gt; introdus_3_LED&lt;='0';
				end case;	
		end process;	
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="counter">library ieee;
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all; 
 
entity counter is 
  port(C,up,down,reset: in  std_logic;  
        Q : out std_logic_vector(3 downto 0));  
end counter; 

architecture archi of counter is  
  signal tmp: std_logic_vector(3 downto 0):="0000"; 
  begin  
      process (C,up,down) 
        begin  
        if reset='1' then
        	tmp&lt;="0000";
        else
  		if up='1' and down='0' then
  			if (tmp="1111") then  
            		tmp &lt;= "0000";  
            	elsif (C'event and C='1') then
            		tmp &lt;= tmp + 1;
            	end if;
          elsif up='0' and down='1' then
            	if (tmp="0000") then  
            		tmp &lt;= "1111";  
            	elsif (C'event and C='1') then
            		tmp &lt;= tmp - 1;
            	end if;
          end if;
          end if;
      end process; 
      Q &lt;= tmp;  
end archi; 
</vhdl>
  <vhdl name="cifru">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY cifru IS&#13;
  PORT (&#13;
  		cif : in std_logic_vector (3 downto 0);
		sel : in std_logic_vector (1 downto 0);
		mode : in  std_logic;
		en_cmp : in std_logic;
		rez : out std_logic;
		cif1_a,cif2_a,cif3_a : out std_logic_vector (3 downto 0) --cif pt afisat
    );&#13;
END cifru;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF cifru IS&#13;
signal cif1_c,cif2_c,cif3_c: std_logic_vector (3 downto 0);&#13; -- cif curente
signal cif1,cif2,cif3: std_logic_vector (3 downto 0); -- cif din dulap


BEGIN&#13;

process (en_cmp,mode,sel,cif,cif1,cif2,cif3)
begin
	if en_cmp='0' then
		if mode='0' then --introducem cod
			case sel is
				when "00"=&gt; cif1&lt;=cif;cif1_a&lt;=cif1;
	&#13;			when "01"=&gt; cif2&lt;=cif;cif2_a&lt;=cif2;
				when "10"=&gt; cif3&lt;=cif;cif3_a&lt;=cif3;
				when others =&gt; rez&lt;='0';
			end case;
		else 
			case sel is
				when "00"=&gt; cif1_c&lt;=cif;
				when "01"=&gt; cif2_c&lt;=cif;
				when "10"=&gt; cif3_c&lt;=cif;
				when others =&gt; rez&lt;='0';
			end case;
	&#13;	end if;
	else 
		if cif1=cif1_c and cif2=cif2_c and cif3=cif3_c then
			rez&lt;='1';
		else
			rez&lt;='0';
		end if;
	end if;
			
end process;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="HEX2Seg">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity HEX2Seg is
    Port ( hex : in STD_LOGIC_VECTOR (3 downto 0);
           seg : out STD_LOGIC_VECTOR (6 downto 0)
           );
           
end HEX2Seg;

architecture Behavioral of HEX2Seg is

begin
seg(6 downto 0) &lt;=
        --  gfedcba 
           "1000000" when HEX="0000" else--0
           "1001111" when HEX="0001" else--1
           "0100100" when HEX="0010" else--2
           "0110000" when HEX="0011" else--3
           "0011001" when HEX="0100" else--4
           "0010010" when HEX="0101" else--5
           "0000010" when HEX="0110" else--6
           "1111000" when HEX="0111" else--7
           "0000000" when HEX="1000" else--8
           "0010000" when HEX="1001" else--9
           "0001000" when HEX="1010" else--A
           "0000011" when HEX="1011" else--b
           "1000110" when HEX="1100" else--C
           "0100001" when HEX="1101" else--d
           "0000110" when HEX="1110" else--E
           "0001110" when HEX="1111" else--F
           "0000000";       
end Behavioral;</vhdl>
  <vhdl name="main_bun">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY main_bun IS&#13;
  PORT (&#13;
	Mup,Mdown,Mreset,Madauga_cifra,Mclk: in std_logic;
	Mintrodus_3,Mintrodu_cifre,Mliber_ocupat:out std_logic;
	cif1: out std_logic_vector(6 downto 0)
    );&#13;
END main_bun;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF main_bun IS&#13;

component UC IS
  PORT (
  		up,down,reset,adauga_cifru : in std_logic;
    		clk : in std_logic;
    		introdus_3_LED : out std_logic;
    		cmp_3 : in std_logic;
    		introdu_caractere_LED,liber_ocupat_LED : out std_logic;
    		sel_afisor : out std_logic_vector (1 downto 0);
    		en_cmp1 : out std_logic
    		
    );
END component;


component counter is 
  port(C,up,down,reset: in  std_logic;  
        Q : out std_logic_vector(3 downto 0));  
END component;

component cifru IS
  PORT (
  		cif : in std_logic_vector (3 downto 0);
		sel : in std_logic_vector (1 downto 0);
		mode : in  std_logic;
		en_cmp : in std_logic;
		rez : out std_logic;
		cif1_a,cif2_a,cif3_a : out std_logic_vector (3 downto 0)
    );
END component;


component HEX2Seg is
    Port ( hex : in STD_LOGIC_VECTOR (3 downto 0);
           seg : out STD_LOGIC_VECTOR (6 downto 0)
          );
END component;

signal q_counter: std_logic_vector(3 downto 0);
signal rez_cifru: std_logic;
signal introdus3_uc: std_logic;
signal inroduCaractere_uc: std_logic;
signal liberOcupat_uc: std_logic;
signal selAfisor_uc: std_logic_vector (1 downto 0);
signal encmp: std_logic;
signal HEX,hex2,hex3: STD_LOGIC_VECTOR (3 downto 0);
signal SEG: STD_LOGIC_VECTOR (6 downto 0);

&#13;
BEGIN&#13;

uc_1: UC port map(Mup,Mdown,Mreset,Madauga_cifra,Mclk,Mintrodus_3,rez_cifru,Mintrodu_cifre,liberOcupat_uc,selAfisor_uc,encmp);
counter_1: counter port map(Mclk,Mup,Mdown,Madauga_cifra,q_counter);
cifru_1: cifru port map(q_counter,selAfisor_uc,liberOcupat_uc,encmp,rez_cifru,HEX,hex2,hex3);
HEX2Seg_1: HEX2Seg port map(HEX,cif1);



&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="portmapcounter">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY portmapcounter IS&#13;
  PORT (&#13;
   mclk,mup,mdown,mreset: in std_logic;
   mQ: out std_logic_vector(3 downto 0)
    );&#13;
END portmapcounter;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF portmapcounter IS&#13;

component counter is 
  port(C,up,down,reset: in  std_logic;  
        Q : out std_logic_vector(3 downto 0));  
end component;
&#13;
BEGIN&#13;

counter_test:counter port map(mclk,mup,mdown,mreset,mQ);
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
</project>
